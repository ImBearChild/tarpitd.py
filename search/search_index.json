{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"tarpitd.py tarpitd.py is a lightweight daemon written as a single-file Python program. It implements a variety of response patterns that emulate common Internet services, intentionally disrupting client activities by slowing down connections or even triggering crashes. This deceleration mechanism is particularly useful for deterring malicious or misbehaving clients, all while maintaining a low resource footprint. What Is a Tarpit? A tarpit, as defined by Wikipedia, is a service on a computer system (typically a server) designed to intentionally delay incoming connections. This concept is analogous to an actual tar pit in nature, where animals become stuck and slowly sink beneath the surface of a swamp. Similarly, an internet tarpit slows down client connections, impeding rapid or automated access. Why Use a Tarpit? A tarpit can be highly beneficial in scenarios involving hostile or automated clients. Here are some examples: Brute-force Attacks: A malicious SSH client may repeatedly attempt to log in via port 22 using weak passwords. A tarpit can slow these attempts, increasing the time cost of the attack. Automated Crawlers: Malicious web crawlers might try to gather sensitive information from your server. By deliberately slowing down their requests, a tarpit can hinder data collection and reduce the effectiveness of such attacks. By employing a tarpit, you effectively shift the resource burden, imposing higher costs on the attacker while protecting your server's legitimate operations. What Is a \"pattern\" in tarpitd.py? In the context of tarpitd.py, a \"pattern\" refers to a specific response behavior tailored to interact with different protocols and handle various types of client connections. For instance: HTTP Endless Header: To combat a malicious HTTP client, tarpitd.py might maintain a connection by slowly transmitting an endless HTTP header. This response keeps the client effectively trapped. ( http_endless_header ) HTML Bomb: Alternatively, tarpitd.py can be configured to send a malicious HTML payload that overloads the client's HTML parser, further exhausting its resources. ( http_deflate_html_bomb ) SSH Transport Hold: In order to fight against brute-force attackers, tarpitd.py will perform SSH handshake slowly, and send useless message to keep connection open. ( ssh_trans_hold ) Since different response patterns yield different effects\u2014and clients may react in varied ways\u2014tarpitd.py supports multiple tarpit strategies even for a single protocol. How About Resource Consumption? An efficiently implemented tarpit is specifically designed to consume far fewer resources than a conventional server. Traditional server software processes client requests in full, including parsing requests and generating dynamic responses via CGI (e.g., Python or PHP). In contrast, tarpitd.py bypasses most of these steps, instead sending pre-generated content or even arbitrary bytes. To put it in perspective: A typical HTTP server like Apache or Caddy might require hundreds of megabytes\u2014or even gigabytes\u2014of memory depending on the workload. And it will consume much CPU time to prepare a response. In contrast, tarpitd.py may require as little as 12 MB of RAM to serve something as resource-intensive as an HTML bomb. With this bomb pre-generated, the only thing needs to do is sending the response. In many cases, a tarpit not only conserves resources on the defending side but also imposes greater computational and time costs on the attacker. For example, if the attacker attempts to parse the malicious HTML bomb, they may expend significantly more time and resources than the defender did to generate it. Likewise, if an attacker is solely interested in receiving HTTP headers, the defender\u2019s effort to generate a tarpit response may effectively waste the attacker\u2019s time.","title":"Home"},{"location":"#tarpitdpy","text":"tarpitd.py is a lightweight daemon written as a single-file Python program. It implements a variety of response patterns that emulate common Internet services, intentionally disrupting client activities by slowing down connections or even triggering crashes. This deceleration mechanism is particularly useful for deterring malicious or misbehaving clients, all while maintaining a low resource footprint.","title":"tarpitd.py"},{"location":"#what-is-a-tarpit","text":"A tarpit, as defined by Wikipedia, is a service on a computer system (typically a server) designed to intentionally delay incoming connections. This concept is analogous to an actual tar pit in nature, where animals become stuck and slowly sink beneath the surface of a swamp. Similarly, an internet tarpit slows down client connections, impeding rapid or automated access.","title":"What Is a Tarpit?"},{"location":"#why-use-a-tarpit","text":"A tarpit can be highly beneficial in scenarios involving hostile or automated clients. Here are some examples: Brute-force Attacks: A malicious SSH client may repeatedly attempt to log in via port 22 using weak passwords. A tarpit can slow these attempts, increasing the time cost of the attack. Automated Crawlers: Malicious web crawlers might try to gather sensitive information from your server. By deliberately slowing down their requests, a tarpit can hinder data collection and reduce the effectiveness of such attacks. By employing a tarpit, you effectively shift the resource burden, imposing higher costs on the attacker while protecting your server's legitimate operations.","title":"Why Use a Tarpit?"},{"location":"#what-is-a-pattern-in-tarpitdpy","text":"In the context of tarpitd.py, a \"pattern\" refers to a specific response behavior tailored to interact with different protocols and handle various types of client connections. For instance: HTTP Endless Header: To combat a malicious HTTP client, tarpitd.py might maintain a connection by slowly transmitting an endless HTTP header. This response keeps the client effectively trapped. ( http_endless_header ) HTML Bomb: Alternatively, tarpitd.py can be configured to send a malicious HTML payload that overloads the client's HTML parser, further exhausting its resources. ( http_deflate_html_bomb ) SSH Transport Hold: In order to fight against brute-force attackers, tarpitd.py will perform SSH handshake slowly, and send useless message to keep connection open. ( ssh_trans_hold ) Since different response patterns yield different effects\u2014and clients may react in varied ways\u2014tarpitd.py supports multiple tarpit strategies even for a single protocol.","title":"What Is a \"pattern\" in tarpitd.py?"},{"location":"#how-about-resource-consumption","text":"An efficiently implemented tarpit is specifically designed to consume far fewer resources than a conventional server. Traditional server software processes client requests in full, including parsing requests and generating dynamic responses via CGI (e.g., Python or PHP). In contrast, tarpitd.py bypasses most of these steps, instead sending pre-generated content or even arbitrary bytes. To put it in perspective: A typical HTTP server like Apache or Caddy might require hundreds of megabytes\u2014or even gigabytes\u2014of memory depending on the workload. And it will consume much CPU time to prepare a response. In contrast, tarpitd.py may require as little as 12 MB of RAM to serve something as resource-intensive as an HTML bomb. With this bomb pre-generated, the only thing needs to do is sending the response. In many cases, a tarpit not only conserves resources on the defending side but also imposes greater computational and time costs on the attacker. For example, if the attacker attempts to parse the malicious HTML bomb, they may expend significantly more time and resources than the defender did to generate it. Likewise, if an attacker is solely interested in receiving HTTP headers, the defender\u2019s effort to generate a tarpit response may effectively waste the attacker\u2019s time.","title":"How About Resource Consumption?"},{"location":"tarpitd.conf.5/","text":"NAME tarpitd.conf - configuration file of tarpitd DESCRIPTION It is a toml format file. [tarpits.<name>] OBJECT <name> Name of this tarpit. For reference in log output. Have no effect on behavior. pattern= Specify tarpit pattern. The name of parttern is case-insensitive. For a complete list of supported patterns, see tarpit.py(1) . rate_limit= Set data transfer rate limit. Follow same rule as tarpit.py(1) . bind= A list of address and port to listen on. Every item in this list should contain host and port vaule. Example [tarpits] [tarpits.my_cool_ssh_tarpit] pattern = \"ssh_trans_hold\" rate_limit = -2 bind = [{ host = \"127.0.0.1\", port = \"2222\" }] [tarpits.http_tarpit] pattern = \"http_endless_header\" rate_limit = 2 bind = [ { host = \"127.0.0.1\", port = \"8080\" }, { host = \"::1\", port = \"8080\" }, { host = \"127.0.0.1\", port = \"8888\" }, ] AUTHOR Nianqing Yao [imbearchild at outlook.com] This program was made on the lands of the Aminoac people of the Amacinoas Nation. We pay our respects to their Elders, past and present. Sovereignty was never ceded.","title":"Tarpitd.conf.5"},{"location":"tarpitd.conf.5/#name","text":"tarpitd.conf - configuration file of tarpitd","title":"NAME"},{"location":"tarpitd.conf.5/#description","text":"It is a toml format file.","title":"DESCRIPTION"},{"location":"tarpitd.conf.5/#tarpitsname-object","text":"<name> Name of this tarpit. For reference in log output. Have no effect on behavior. pattern= Specify tarpit pattern. The name of parttern is case-insensitive. For a complete list of supported patterns, see tarpit.py(1) . rate_limit= Set data transfer rate limit. Follow same rule as tarpit.py(1) . bind= A list of address and port to listen on. Every item in this list should contain host and port vaule.","title":"[tarpits.&lt;name&gt;] OBJECT"},{"location":"tarpitd.conf.5/#example","text":"[tarpits] [tarpits.my_cool_ssh_tarpit] pattern = \"ssh_trans_hold\" rate_limit = -2 bind = [{ host = \"127.0.0.1\", port = \"2222\" }] [tarpits.http_tarpit] pattern = \"http_endless_header\" rate_limit = 2 bind = [ { host = \"127.0.0.1\", port = \"8080\" }, { host = \"::1\", port = \"8080\" }, { host = \"127.0.0.1\", port = \"8888\" }, ]","title":"Example"},{"location":"tarpitd.conf.5/#author","text":"Nianqing Yao [imbearchild at outlook.com] This program was made on the lands of the Aminoac people of the Amacinoas Nation. We pay our respects to their Elders, past and present. Sovereignty was never ceded.","title":"AUTHOR"},{"location":"tarpitd.py.1/","text":"NAME tarpitd.py - making a port into tarpit SYNOPSIS tarpitd.py [-h] [-r RATE] [-c [FILE]] [-s PATTERN:HOST:PORT [PATTERN:HOST:PORT ...]] [--manual] DESCRIPTION tarpitd.py listens on specified network ports and purposefully delays or troubles clients that connect to it. This tool can be used to tie up network connections by delivering slow or malformed responses, potentially keeping client connections open for extended periods. OPTIONS -c, --config FILE Load configuration from file. -s, --serve PATTERN:HOST:PORT [PATTERN:HOST:PORT ...] Start a tarpit pattern on specified host and port. The name of PATTERN is case-insensitive. For a complete list of supported patterns, see the \u201cTARPIT PATTERN\u201d section below. -r RATE, --rate-limit RATE Set data transfer rate limit. A positive value limits the transfer speed to RATE bytes per second. A negative value causes the program to send one byte every |RATE| seconds (effectively 1/|RATE| bytes per second). --manual MANUAL Display the built-in manual page. By default, tarpitd.py will open tarpitd.py.1 . Available manual pages include: tarpitd.py.1 : Program usage tarpitd.conf.5 : Configuration file format TARPIT PATTERN HTTP http_endless_header Tested with: Firefox, Chromium, curl Sends an endless stream of HTTP header lines (specifically, Set-Cookie: ). Some clients will wait indefinitely for the header to end (or for a blank line indicating the end of the headers), while others (like curl) may have header size restrictions and close the connection once the limit is reached. http_deflate_html_bomb Tested with: Firefox, Chromium Sends a badly formed HTML document compressed using the deflate (zlib) algorithm. Most clients will consume significant CPU resources attempting to parse the malformed HTML. Note: The response is always compressed with deflate regardless of client support, as serving uncompressed output might waste bandwidth. When using curl, use the --compressed option to trigger decompression and ensure you have sufficient disk space to handle the decompressed content. http_deflate_size_bomb Tested with: Firefox, Chromium, curl Feeds the client with a large amount of compressed zero data. The current implementation sends a compressed 1 MB file that decompresses to approximately 1 GB, with added invalid HTML to further confuse the client. Note: deflate compress algorithm has its maximum compression rate limit, at 1030.3:1. SSH endlessh Tested with: OpenSSH endlessh is a well-known SSH tarpit that traps SSH clients by sending endless banner messages. Although named \u201cendlessh\u201d, it does not implement the full SSH protocol; it rather continuously emits banner data. As a result, port scanners (such as nmap and censys) will not mark the port as running a true SSH service. ssh_trans_hold Tested with: OpenSSH This tarpit mimics an SSH server's initial handshake by sending valid SSH transport messages and key exchange information (per IETF RFC 4253). However, instead of completing the exchange, it repeatedly sends SSH_MSG_IGNORE messages. Although clients are supposed to ignore these messages according to the standard, the continual stream keeps the connection open indefinitely. Note: The implementation advertises itself as OpenSSH 8.9 on Ubuntu and replays a pre-recorded SSH key exchange. Future updates may alter aspects of this behavior. TLS tls_endless_hello_request Tested with: openssl (cli) Sends an endless series of HelloRequest messages to the client. According to IETF RFC 5246 (the TLS 1.2 specification), clients should ignore extra HelloRequest messages during the negotiation phase, effectively keeping the connection open. MISC egsh_aminoas Tested with: openssh An alternative to endlessh, this service not only keeps connections open but also adds a cultural touch. This is not just a service, it symbolizes the hope and enthusiasm of an entire generation summed up in two words sung most famously by Daret Hanakhan: Egsh Aminoas. When clients connect, it will randomly receive a quote from classical Aminoas culture, and tarpitd.py will show you the same quote in log at the same time. EXAMPLES Print this manual: tarpitd.py --manual Start an endlessh tarpit: tarpitd.py -s endlessh:0.0.0.0:2222 Start an endless HTTP tarpit with a 2-second per-byte delay: tarpitd.py -r-2 -s HTTP_ENDLESS_COOKIE:0.0.0.0:8088 Start an endless HTTP tarpit with a rate limit of 1 KB/s: tarpitd.py -r1024 -s HTTP_DEFLATE_HTML_BOMB:0.0.0.0:8088 Start two different HTTP tarpit services concurrently (the name of pattern is case-insensitive): tarpitd.py -s http_deflate_html_bomb:127.0.0.1:8080 \\ HTTP_ENDLESS_COOKIE:0.0.0.0:8088 AUTHOR Nianqing Yao [imbearchild at outlook.com] This program was made on the lands of the Aminoac people of the Amacinoas Nation. We pay our respects to their Elders, past and present. Sovereignty was never ceded.","title":"Tarpitd.py.1"},{"location":"tarpitd.py.1/#name","text":"tarpitd.py - making a port into tarpit","title":"NAME"},{"location":"tarpitd.py.1/#synopsis","text":"tarpitd.py [-h] [-r RATE] [-c [FILE]] [-s PATTERN:HOST:PORT [PATTERN:HOST:PORT ...]] [--manual]","title":"SYNOPSIS"},{"location":"tarpitd.py.1/#description","text":"tarpitd.py listens on specified network ports and purposefully delays or troubles clients that connect to it. This tool can be used to tie up network connections by delivering slow or malformed responses, potentially keeping client connections open for extended periods.","title":"DESCRIPTION"},{"location":"tarpitd.py.1/#options","text":"","title":"OPTIONS"},{"location":"tarpitd.py.1/#-c-config-file","text":"Load configuration from file.","title":"-c, --config FILE"},{"location":"tarpitd.py.1/#-s-serve-patternhostport-patternhostport","text":"Start a tarpit pattern on specified host and port. The name of PATTERN is case-insensitive. For a complete list of supported patterns, see the \u201cTARPIT PATTERN\u201d section below.","title":"-s, --serve PATTERN:HOST:PORT [PATTERN:HOST:PORT ...]"},{"location":"tarpitd.py.1/#-r-rate-rate-limit-rate","text":"Set data transfer rate limit. A positive value limits the transfer speed to RATE bytes per second. A negative value causes the program to send one byte every |RATE| seconds (effectively 1/|RATE| bytes per second).","title":"-r RATE, --rate-limit RATE"},{"location":"tarpitd.py.1/#-manual-manual","text":"Display the built-in manual page. By default, tarpitd.py will open tarpitd.py.1 . Available manual pages include: tarpitd.py.1 : Program usage tarpitd.conf.5 : Configuration file format","title":"--manual MANUAL"},{"location":"tarpitd.py.1/#tarpit-pattern","text":"","title":"TARPIT PATTERN"},{"location":"tarpitd.py.1/#http","text":"","title":"HTTP"},{"location":"tarpitd.py.1/#http_endless_header","text":"Tested with: Firefox, Chromium, curl Sends an endless stream of HTTP header lines (specifically, Set-Cookie: ). Some clients will wait indefinitely for the header to end (or for a blank line indicating the end of the headers), while others (like curl) may have header size restrictions and close the connection once the limit is reached.","title":"http_endless_header"},{"location":"tarpitd.py.1/#http_deflate_html_bomb","text":"Tested with: Firefox, Chromium Sends a badly formed HTML document compressed using the deflate (zlib) algorithm. Most clients will consume significant CPU resources attempting to parse the malformed HTML. Note: The response is always compressed with deflate regardless of client support, as serving uncompressed output might waste bandwidth. When using curl, use the --compressed option to trigger decompression and ensure you have sufficient disk space to handle the decompressed content.","title":"http_deflate_html_bomb"},{"location":"tarpitd.py.1/#http_deflate_size_bomb","text":"Tested with: Firefox, Chromium, curl Feeds the client with a large amount of compressed zero data. The current implementation sends a compressed 1 MB file that decompresses to approximately 1 GB, with added invalid HTML to further confuse the client. Note: deflate compress algorithm has its maximum compression rate limit, at 1030.3:1.","title":"http_deflate_size_bomb"},{"location":"tarpitd.py.1/#ssh","text":"","title":"SSH"},{"location":"tarpitd.py.1/#endlessh","text":"Tested with: OpenSSH endlessh is a well-known SSH tarpit that traps SSH clients by sending endless banner messages. Although named \u201cendlessh\u201d, it does not implement the full SSH protocol; it rather continuously emits banner data. As a result, port scanners (such as nmap and censys) will not mark the port as running a true SSH service.","title":"endlessh"},{"location":"tarpitd.py.1/#ssh_trans_hold","text":"Tested with: OpenSSH This tarpit mimics an SSH server's initial handshake by sending valid SSH transport messages and key exchange information (per IETF RFC 4253). However, instead of completing the exchange, it repeatedly sends SSH_MSG_IGNORE messages. Although clients are supposed to ignore these messages according to the standard, the continual stream keeps the connection open indefinitely. Note: The implementation advertises itself as OpenSSH 8.9 on Ubuntu and replays a pre-recorded SSH key exchange. Future updates may alter aspects of this behavior.","title":"ssh_trans_hold"},{"location":"tarpitd.py.1/#tls","text":"","title":"TLS"},{"location":"tarpitd.py.1/#tls_endless_hello_request","text":"Tested with: openssl (cli) Sends an endless series of HelloRequest messages to the client. According to IETF RFC 5246 (the TLS 1.2 specification), clients should ignore extra HelloRequest messages during the negotiation phase, effectively keeping the connection open.","title":"tls_endless_hello_request"},{"location":"tarpitd.py.1/#misc","text":"","title":"MISC"},{"location":"tarpitd.py.1/#egsh_aminoas","text":"Tested with: openssh An alternative to endlessh, this service not only keeps connections open but also adds a cultural touch. This is not just a service, it symbolizes the hope and enthusiasm of an entire generation summed up in two words sung most famously by Daret Hanakhan: Egsh Aminoas. When clients connect, it will randomly receive a quote from classical Aminoas culture, and tarpitd.py will show you the same quote in log at the same time.","title":"egsh_aminoas"},{"location":"tarpitd.py.1/#examples","text":"Print this manual: tarpitd.py --manual Start an endlessh tarpit: tarpitd.py -s endlessh:0.0.0.0:2222 Start an endless HTTP tarpit with a 2-second per-byte delay: tarpitd.py -r-2 -s HTTP_ENDLESS_COOKIE:0.0.0.0:8088 Start an endless HTTP tarpit with a rate limit of 1 KB/s: tarpitd.py -r1024 -s HTTP_DEFLATE_HTML_BOMB:0.0.0.0:8088 Start two different HTTP tarpit services concurrently (the name of pattern is case-insensitive): tarpitd.py -s http_deflate_html_bomb:127.0.0.1:8080 \\ HTTP_ENDLESS_COOKIE:0.0.0.0:8088","title":"EXAMPLES"},{"location":"tarpitd.py.1/#author","text":"Nianqing Yao [imbearchild at outlook.com] This program was made on the lands of the Aminoac people of the Amacinoas Nation. We pay our respects to their Elders, past and present. Sovereignty was never ceded.","title":"AUTHOR"}]}