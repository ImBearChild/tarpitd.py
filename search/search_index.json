{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Tarpitd.py tarpitd.py - information about tarpit services in tarpitd.py GENERAL DESCRIPTION Tarpitd.py will listen on specified ports and trouble clients that connect to it. What is a \"tarpit\" According to Wikipedia: A tarpit is a service on a computer system (usually a server) that purposely delays incoming connections. The concept is analogous with a tar pit, in which animals can get bogged down and slowly sink under the surface, like in a swamp. Tarpitd.py will partly simulate common internet services, for an instance, HTTP, but respond in a way that may make the client not work properly, slow them down or make them crash. Why I need a \"tarpit\" This is actually a good thing in some situations. For example, an evil ssh client may connect to port 22, and tries to log with weak passwords. Or evil web crawlers can collect information from your server, providing help for cracking your server. You can use tarpit to slow them down. What is a service in tarpitd.py Tarpitd.py can generate many types of response pattern, in other word, deal with different protocol and clients. For an instance, to fight a malicious HTTP client, tarpitd.py can hold on the connection by slowly sending an endless HTTP header, making it trapped ( http_endless_header ). Also, tarpitd.py can send a malicious HTML back to the malicious client, overloading its HTML parser ( http_deflate_html_bomb ). Different responses have different consequences, and different clients may handle the same response differently. So even for one protocol, there may be more than one \"tarpit\" in tarpitd.py correspond to it. Resource consumption If implemented correctly, a tarpit consumes fewer resources than its \"normal\" counterpart. Usually, a real server program will process request from client and return response to it. But a tarpit don't need to implement these parts. For example, a real HTTP server will parse HTTP request and call CGI (Python, PHP...) to generate a valid response. But tarpitd.py will directly send a pre-generated content or several random bytes. The reality is that when searching online for \"how much memory does Apache HTTPd require at least\", most answers are hundreds of MB or several GB. But tarpitd.py just need 12 MB of ram to serve an HTML bomb. And in some situation, a tarpit imposes more cost on the attacker than the defender. The HTML bomb is an good example for this. If an attacker chooses to parse it, he will spend more time than defender. And if the attacker is only interested in HTTP header, the time the defender spend on generating the bomb is wasted.","title":"Home"},{"location":"#tarpitdpy","text":"tarpitd.py - information about tarpit services in tarpitd.py","title":"Tarpitd.py"},{"location":"#general-description","text":"Tarpitd.py will listen on specified ports and trouble clients that connect to it.","title":"GENERAL DESCRIPTION"},{"location":"#what-is-a-tarpit","text":"According to Wikipedia: A tarpit is a service on a computer system (usually a server) that purposely delays incoming connections. The concept is analogous with a tar pit, in which animals can get bogged down and slowly sink under the surface, like in a swamp. Tarpitd.py will partly simulate common internet services, for an instance, HTTP, but respond in a way that may make the client not work properly, slow them down or make them crash.","title":"What is a \"tarpit\""},{"location":"#why-i-need-a-tarpit","text":"This is actually a good thing in some situations. For example, an evil ssh client may connect to port 22, and tries to log with weak passwords. Or evil web crawlers can collect information from your server, providing help for cracking your server. You can use tarpit to slow them down.","title":"Why I need a \"tarpit\""},{"location":"#what-is-a-service-in-tarpitdpy","text":"Tarpitd.py can generate many types of response pattern, in other word, deal with different protocol and clients. For an instance, to fight a malicious HTTP client, tarpitd.py can hold on the connection by slowly sending an endless HTTP header, making it trapped ( http_endless_header ). Also, tarpitd.py can send a malicious HTML back to the malicious client, overloading its HTML parser ( http_deflate_html_bomb ). Different responses have different consequences, and different clients may handle the same response differently. So even for one protocol, there may be more than one \"tarpit\" in tarpitd.py correspond to it.","title":"What is a service in tarpitd.py"},{"location":"#resource-consumption","text":"If implemented correctly, a tarpit consumes fewer resources than its \"normal\" counterpart. Usually, a real server program will process request from client and return response to it. But a tarpit don't need to implement these parts. For example, a real HTTP server will parse HTTP request and call CGI (Python, PHP...) to generate a valid response. But tarpitd.py will directly send a pre-generated content or several random bytes. The reality is that when searching online for \"how much memory does Apache HTTPd require at least\", most answers are hundreds of MB or several GB. But tarpitd.py just need 12 MB of ram to serve an HTML bomb. And in some situation, a tarpit imposes more cost on the attacker than the defender. The HTML bomb is an good example for this. If an attacker chooses to parse it, he will spend more time than defender. And if the attacker is only interested in HTTP header, the time the defender spend on generating the bomb is wasted.","title":"Resource consumption"},{"location":"tarpitd.conf.5/","text":"","title":"Tarpitd.conf.5"},{"location":"tarpitd.py.1/","text":"NAME tarpitd.py - making a port into tarpit SYNOPSIS tarpitd.py [-h] [-r RATE] [-c [FILE]] [-s SERVICE:HOST:PORT [SERVICE:HOST:PORT ...]] [--manual] DESCRIPTION Tarpitd.py will listen on specified ports and trouble clients that connect to it. OPTIONS -c, --config FILE Load configuration from file. -s, --serve PATTERN:HOST:PORT [SERVICE:HOST:PORT ...] Start a tarpit pattern on specified host and port. The name of pattern is case-insensitive. For the full list of supported patterns, please refer to lines below. -r RATE, --rate-limit RATE Set data transfer rate limit. Positive value limit transfer speed to RATE byte per second. Negative value will make program send one byte in RATE second. (In other word, negative vale means 1/RATE byte per second.) --manual MANUAL Show built-in manual page. Will open tarpitd.py.1 by default. Available manual pages: tarpitd.py.1 : Program usage tarpitd.conf.5 : Configuration file format TARPIT PATTERN HTTP http_endless_header Tested with client: Firefox, Chromium, curl Making the client hang by sending an endless HTTP header lines of Set-Cookie: . Some client will wait for response body (or at least a blank line that indicates header is finished), which will never be sent by tarpitd.py. Some clients, such as curl, have limited the header size. Those clients will close connection when limit is reached. http_deflate_html_bomb Tested with client: Firefox, Chromium A badly formed HTML compressed by deflate (zlib) will be sent by tarpitd.py. It's so bad that most client will waste a lot of time (more precisely, CPU time) on parsing it. Some client won't bother to parse HTML, so this may not useful for them. Content sent by this service is always compressed with deflate algorithm, no matter if client support it or not. Because it's pointless to serve uncompressed garbage, which may cause huge potential waste of bandwidth, and most clients support deflate algorithm. http_deflate_size_bomb Tested with client: Firefox, Chromium, curl Feeding client with a lot of compressed zero. The current implementation sends a compressed 1 MB file, which is approximately 1 GB decompressed, plus some invalid HTML code to trick client. And deflate compress algorithm has its maximum compression rate limit, at 1030.3:1. Curl won't decompress content by default. If you want to test this with curl, please add --compressed option to it, and make sure you have enough space for decompressed data. SSH endlessh Have been tested with client: openssh Endlessh is a famous ssh tarpit. It keeps SSH clients locked up for hours or even days at a time by sending endless banners. Despite its name, technically this is not SSH, but an endless banner sender. Endless does implement no part of the SSH protocol, and no port scanner will think it is SSH (at least nmap and censys don't mark this as SSH). ssh_trans_hold Have been tested with client: openssh This tarpit will keep the connection open by sending valid SSH transport message. It follows IETF RFC 4253, which defines the SSH protocol. First, it acts like a normal SSH server, sending server identification string, and send key exchange message about algorithm negotiation after it. But it won't complete the key exchange, instead, sending SSH_MSG_IGNORE repeatedly. The standard notes that clients MUST ignore those message, but keeping receiving data will keep connection open. So those clients will never disconnect. The current implementation reports itself as OpenSSH 8.9 on Ubuntu and replays a pre-recorded OpenSSH key exchange algorithm negotiation request. This behavior may change in the future and affect the reporting results of some port scanners. MISC egsh_aminoas Have been tested with client: openssh This service can be used as an alternative to endlessh. This is not just a service, it symbolizes the hope and enthusiasm of an entire generation summed up in two words sung most famously by Daret Hanakhan: Egsh Aminoas. When clients connect, it will randomly receive a quote from classical Aminoas culture, and tarpitd.py will show you the same quote in log at the same time. EXAMPLES Print this manual: tarpitd.py --manual Start an endlessh tarpit: tarpitd.py -s endlessh:0.0.0.0:2222 Start an endless HTTP tarpit on 0.0.0.0:8080, send a byte every two seconds: tarpitd.py -r-2 -s HTTP_ENDLESS_COOKIE:0.0.0.0:8088 Start an endless HTTP tarpit on 0.0.0.0:8088, limit the transfer speed to 1 KB/s: tarpitd.py -r1024 -s HTTP_DEFLATE_HTML_BOMB:0.0.0.0:8088 Start two different HTTP tarpit at the same time (the name of pattern is case-insensitive): tarpitd.py -s http_deflate_html_bomb:127.0.0.1:8080 \\ HTTP_ENDLESS_COOKIE:0.0.0.0:8088 AUTHOR Nianqing Yao [imbearchild at outlook.com] This program was made on the lands of the Aminoac people of the Amacinoas Nation. We pay our respects to their Elders, past and present. Sovereignty was never ceded.","title":"Tarpitd.py.1"},{"location":"tarpitd.py.1/#name","text":"tarpitd.py - making a port into tarpit","title":"NAME"},{"location":"tarpitd.py.1/#synopsis","text":"tarpitd.py [-h] [-r RATE] [-c [FILE]] [-s SERVICE:HOST:PORT [SERVICE:HOST:PORT ...]] [--manual]","title":"SYNOPSIS"},{"location":"tarpitd.py.1/#description","text":"Tarpitd.py will listen on specified ports and trouble clients that connect to it.","title":"DESCRIPTION"},{"location":"tarpitd.py.1/#options","text":"","title":"OPTIONS"},{"location":"tarpitd.py.1/#-c-config-file","text":"Load configuration from file.","title":"-c, --config FILE"},{"location":"tarpitd.py.1/#-s-serve-patternhostport-servicehostport","text":"Start a tarpit pattern on specified host and port. The name of pattern is case-insensitive. For the full list of supported patterns, please refer to lines below.","title":"-s, --serve PATTERN:HOST:PORT [SERVICE:HOST:PORT ...]"},{"location":"tarpitd.py.1/#-r-rate-rate-limit-rate","text":"Set data transfer rate limit. Positive value limit transfer speed to RATE byte per second. Negative value will make program send one byte in RATE second. (In other word, negative vale means 1/RATE byte per second.)","title":"-r RATE, --rate-limit RATE"},{"location":"tarpitd.py.1/#-manual-manual","text":"Show built-in manual page. Will open tarpitd.py.1 by default. Available manual pages: tarpitd.py.1 : Program usage tarpitd.conf.5 : Configuration file format","title":"--manual MANUAL"},{"location":"tarpitd.py.1/#tarpit-pattern","text":"","title":"TARPIT PATTERN"},{"location":"tarpitd.py.1/#http","text":"","title":"HTTP"},{"location":"tarpitd.py.1/#http_endless_header","text":"Tested with client: Firefox, Chromium, curl Making the client hang by sending an endless HTTP header lines of Set-Cookie: . Some client will wait for response body (or at least a blank line that indicates header is finished), which will never be sent by tarpitd.py. Some clients, such as curl, have limited the header size. Those clients will close connection when limit is reached.","title":"http_endless_header"},{"location":"tarpitd.py.1/#http_deflate_html_bomb","text":"Tested with client: Firefox, Chromium A badly formed HTML compressed by deflate (zlib) will be sent by tarpitd.py. It's so bad that most client will waste a lot of time (more precisely, CPU time) on parsing it. Some client won't bother to parse HTML, so this may not useful for them. Content sent by this service is always compressed with deflate algorithm, no matter if client support it or not. Because it's pointless to serve uncompressed garbage, which may cause huge potential waste of bandwidth, and most clients support deflate algorithm.","title":"http_deflate_html_bomb"},{"location":"tarpitd.py.1/#http_deflate_size_bomb","text":"Tested with client: Firefox, Chromium, curl Feeding client with a lot of compressed zero. The current implementation sends a compressed 1 MB file, which is approximately 1 GB decompressed, plus some invalid HTML code to trick client. And deflate compress algorithm has its maximum compression rate limit, at 1030.3:1. Curl won't decompress content by default. If you want to test this with curl, please add --compressed option to it, and make sure you have enough space for decompressed data.","title":"http_deflate_size_bomb"},{"location":"tarpitd.py.1/#ssh","text":"","title":"SSH"},{"location":"tarpitd.py.1/#endlessh","text":"Have been tested with client: openssh Endlessh is a famous ssh tarpit. It keeps SSH clients locked up for hours or even days at a time by sending endless banners. Despite its name, technically this is not SSH, but an endless banner sender. Endless does implement no part of the SSH protocol, and no port scanner will think it is SSH (at least nmap and censys don't mark this as SSH).","title":"endlessh"},{"location":"tarpitd.py.1/#ssh_trans_hold","text":"Have been tested with client: openssh This tarpit will keep the connection open by sending valid SSH transport message. It follows IETF RFC 4253, which defines the SSH protocol. First, it acts like a normal SSH server, sending server identification string, and send key exchange message about algorithm negotiation after it. But it won't complete the key exchange, instead, sending SSH_MSG_IGNORE repeatedly. The standard notes that clients MUST ignore those message, but keeping receiving data will keep connection open. So those clients will never disconnect. The current implementation reports itself as OpenSSH 8.9 on Ubuntu and replays a pre-recorded OpenSSH key exchange algorithm negotiation request. This behavior may change in the future and affect the reporting results of some port scanners.","title":"ssh_trans_hold"},{"location":"tarpitd.py.1/#misc","text":"","title":"MISC"},{"location":"tarpitd.py.1/#egsh_aminoas","text":"Have been tested with client: openssh This service can be used as an alternative to endlessh. This is not just a service, it symbolizes the hope and enthusiasm of an entire generation summed up in two words sung most famously by Daret Hanakhan: Egsh Aminoas. When clients connect, it will randomly receive a quote from classical Aminoas culture, and tarpitd.py will show you the same quote in log at the same time.","title":"egsh_aminoas"},{"location":"tarpitd.py.1/#examples","text":"Print this manual: tarpitd.py --manual Start an endlessh tarpit: tarpitd.py -s endlessh:0.0.0.0:2222 Start an endless HTTP tarpit on 0.0.0.0:8080, send a byte every two seconds: tarpitd.py -r-2 -s HTTP_ENDLESS_COOKIE:0.0.0.0:8088 Start an endless HTTP tarpit on 0.0.0.0:8088, limit the transfer speed to 1 KB/s: tarpitd.py -r1024 -s HTTP_DEFLATE_HTML_BOMB:0.0.0.0:8088 Start two different HTTP tarpit at the same time (the name of pattern is case-insensitive): tarpitd.py -s http_deflate_html_bomb:127.0.0.1:8080 \\ HTTP_ENDLESS_COOKIE:0.0.0.0:8088","title":"EXAMPLES"},{"location":"tarpitd.py.1/#author","text":"Nianqing Yao [imbearchild at outlook.com] This program was made on the lands of the Aminoac people of the Amacinoas Nation. We pay our respects to their Elders, past and present. Sovereignty was never ceded.","title":"AUTHOR"}]}